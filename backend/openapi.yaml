openapi: "3.0.2"

info:
  title: AdoCÃO API
  version: "1.0"

servers:
  - url: "http://localhost:8080"
    description: Development server

paths:
  # Auth
  /signup:
    post:
      tags:
        - Auth
      summary: Sign up a new user and get a token
      requestBody:
        description: User object that needs to be added to the database
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignupRequest"
      responses:
        "200":
          description: A token object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
  /signin:
    post:
      tags:
        - Auth
      summary: Sign in an existing user and get a token
      requestBody:
        description: User credentials for signing in
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SigninRequest"
      responses:
        "200":
          description: A token object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"

  /change_password:
    post:
      tags:
        - Auth
      summary: Change the user's password
      security:
        - Bearer: []
      requestBody:
        description: User credentials for signing in
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePasswordRequest"
      responses:
        "200":
          description: If the password is changed successfully
        "400":
          description: If the request is missing required fields or the old password is incorrect

  # Animals
  /animals:
    get:
      summary: Retrieve all animals
      responses:
        "200":
          description: Array of animal objects returned upon successful retrieval
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnimalResponse"
    post:
      summary: Create a new animal
      security:
        - Bearer: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/AnimalCreateRequest"
      responses:
        "201":
          description: Animal object created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SimpleAnimalResponse"
        "400":
          description: >
            If the request is missing required fields or specifies an invalid ONG
        "403":
          description: If the user is not authorized to create the animal

  /animals/{id}:
    get:
      summary: Retrieve an animal by ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the animal to retrieve
          schema:
            type: integer
      responses:
        "200":
          description: Animal object returned upon successful retrieval
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnimalResponse"
        "400":
          description: If the specified animal does not exist
        "403":
          description: If the user is not authorized to access the animal
    delete:
      summary: Delete an animal by ID
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the animal to delete
          schema:
            type: integer
      responses:
        "200":
          description: If the animal is deleted successfully
        "400":
          description: If the specified animal does not exist
        "403":
          description: If the user is not authorized to delete the animal
    put:
      summary: Update an animal by ID
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the animal to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/AnimalUpdateRequest"
      responses:
        "200":
          description: If the animal is updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SimpleAnimalResponse"
        "400":
          description: If the specified animal does not exist or the request is missing required fields
        "403":
          description: If the user is not authorized to update the animal

  /users/{id}/animals:
    get:
      summary: Retrieve animals belonging to a user
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user whose animals to retrieve
          schema:
            type: integer
      responses:
        "200":
          description: Array of animal objects belonging to the specified user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AnimalResponse"

  /animals/{id}/tag:
    post:
      summary: Add a tag to an animal
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the animal
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/AnimalTagRequest"
      responses:
        "200":
          description: If the tag is added successfully
        "400":
          description: If the specified animal or tag does not exist
        "403":
          description: If the user is not authorized to add a tag to the animal
    delete:
      summary: Remove a tag from an animal
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the animal
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/AnimalTagRequest"
      responses:
        "200":
          description: If the tag is removed successfully
        "400":
          description: If the specified animal or tag does not exist
        "403":
          description: If the user is not authorized to remove a tag from the animal

  # Extra
  /cities:
    get:
      tags:
        - City
      summary: Retrieve all cities
      # name and state in query
      parameters:
        - name: state
          in: query
          description: State of the city (optional)
          schema:
            type: string
          example: "SP"
        - name: name
          in: query
          description: Name of the city (optional if and only if state is specified)
          schema:
            type: string
          example: "São Carlos"
      responses:
        "200":
          description: Array of city objects returned upon successful retrieval
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CityResponse"
        "400":
          description: If neither state nor name is specified

  /animal-species:
    get:
      tags:
        - Animal Species
      summary: Retrieve all animal species
      responses:
        "200":
          description: Array of animal species objects returned upon successful retrieval
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AnimalSpecieResponse"

    post:
      tags:
        - Animal Species
      summary: Create a new animal species
      security:
        - Bearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
              required:
                - name
      responses:
        "201":
          description: Animal species object created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnimalSpecieResponse"
        "400":
          description: If the request is missing required fields
        "403":
          description: If the user is not authorized to create the animal species

  /animal-species/name/{name}:
    get:
      tags:
        - Animal Species
      summary: Retrieve an animal species by name
      parameters:
        - name: name
          in: path
          required: true
          description: Name of the animal species to retrieve
          schema:
            type: string
      responses:
        "200":
          description: Animal species object returned upon successful retrieval
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AnimalSpecieResponse"

  /animal-species/{id}:
    delete:
      tags:
        - Animal Species
      summary: Delete an animal species by ID
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the animal species to delete
          schema:
            type: integer
      responses:
        "200":
          description: If the animal species is deleted successfully
        "400":
          description: If the specified animal species does not exist
        "403":
          description: If the user is not authorized to delete the animal species

  /animal-tags:
    get:
      tags:
        - Animal Tags
      summary: Retrieve all animal tags
      responses:
        "200":
          description: Array of animal tags objects returned upon successful retrieval
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AnimalTagResponse"

    post:
      tags:
        - Animal Tags
      summary: Create a new animal tags
      security:
        - Bearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
              required:
                - name
      responses:
        "201":
          description: Animal tags object created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnimalTagResponse"
        "400":
          description: If the request is missing required fields
        "403":
          description: If the user is not authorized to create the animal tags

  /animal-tags/name/{name}:
    get:
      tags:
        - Animal Tags
      summary: Retrieve an animal tags by name
      parameters:
        - name: name
          in: path
          required: true
          description: Name of the animal tags to retrieve
          schema:
            type: string
      responses:
        "200":
          description: Animal tags object returned upon successful retrieval
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AnimalTagResponse"

  /animal-tags/{id}:
    delete:
      tags:
        - Animal Tags
      summary: Delete an animal tags by ID
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the animal tags to delete
          schema:
            type: integer
      responses:
        "200":
          description: If the animal tags is deleted successfully
        "400":
          description: If the specified animal tags does not exist
        "403":
          description: If the user is not authorized to delete the animal tags

  # Ongs

  # Users
  /users/{id}:
    get:
      tags:
        - Users
      summary: Retrieve a user by ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to retrieve
          schema:
            type: integer
      responses:
        "200":
          description: User object returned upon successful retrieval
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDetailedInfo"

    put:
      tags:
        - Users
      summary: Update a user by ID
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Bruna Cunha"
                email:
                  type: string
                  example: "brunaru@gmail.com"
      responses:
        "200":
          description: If the user is updated successfully

  /users:
    get:
      tags:
        - Users
      summary: Retrieve the current logged user
      security:
        - Bearer: []
      responses:
        "200":
          description: User object returned upon successful retrieval
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDetailedInfo"

    put:
      tags:
        - Users
      summary: Update the current logged user
      security:
        - Bearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Bruna Cunha"
                email:
                  type: string
                  example: "brunaru@gmail.com"
      responses:
        "200":
          description: If the user is updated successfully

  /users/{id}/change-super-admin:
    post:
      tags:
        - Users
      summary: Change the super admin status of a user by ID
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newStatus:
                  type: boolean
                  example: true
      responses:
        "200":
          description: If the user is updated successfully

  /contact-info:
    put:
      tags:
        - Contact Info
      summary: Update the contact info for the current logged user
      security:
        - Bearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: brunaru@icmc.usp.br
                instagramProfile:
                  type: string
                  nullable: true
                  example: null
                facebookProfile:
                  type: string
                  nullable: true
                  example: null
                telephoneNumber:
                  type: string
                  nullable: true
                  example: null
                other:
                  type: string
                  nullable: true
                  example: null
      responses:
        "200":
          description: If the contact info is updated successfully

  /contact-info/{id}:
    put:
      tags:
        - Contact Info
      summary: Update the contact info by ID
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the contact info to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: brunaru@icmc.usp.br
                instagramProfile:
                  type: string
                  nullable: true
                  example: null
                facebookProfile:
                  type: string
                  nullable: true
                  example: null
                telephoneNumber:
                  type: string
                  nullable: true
                  example: null
                other:
                  type: string
                  nullable: true
                  example: null
      responses:
        "200":
          description: If the contact info is updated successfully

components:
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: >-
        Login token

  schemas:
    SignupRequest:
      type: object
      properties:
        name:
          type: string
          example: "Bruna Carolina Rodrigues da Cunha"
        email:
          type: string
          example: "brunaru@icmc.usp.br"
        password:
          type: string
          example: "#Senha1234"
      required:
        - name
        - email
        - password

    SigninRequest:
      type: object
      properties:
        email:
          type: string
          example: "brunaru@icmc.usp.br"
        password:
          type: string
          example: "#Senha1234"
      required:
        - email
        - password

    ChangePasswordRequest:
      type: object
      properties:
        newPassword:
          type: string
          example: "#Senha12345"
        oldPassword:
          type: string
          example: "#Senha1234"
      required:
        - newPassword
        - oldPassword

    AuthResponse:
      type: object
      properties:
        token:
          type: object
          properties:
            token:
              type: string
              example: "<base64>"
            payload:
              type: object
              properties:
                sub:
                  type: integer
                  example: 1
                isSuperAdmin:
                  type: boolean
                  example: false
                isOngManager:
                  type: boolean
                  example: false
                isOngWorker:
                  type: boolean
                  example: false

    AnimalCreateRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        birthdate:
          type: string
        heightInCm:
          type: number
        weightInKg:
          type: number
        isNeutered:
          type: boolean
        isDewormed:
          type: boolean
        animalGender:
          type: string
        AnimalSpecieId:
          type: number
        CityId:
          type: number
        isUserOwned:
          type: boolean
        ongId:
          type: number
        photo:
          type: string
          format: binary
      required:
        - name
        - description
        - birthdate
        - isNeutered
        - isDewormed
        - isUserOwned
        - animalGender
        - AnimalSpecieId
        - CityId
        - photo

    AnimalUpdateRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        birthdate:
          type: string
        heightInCm:
          type: number
        weightInKg:
          type: number
        isNeutered:
          type: boolean
        isDewormed:
          type: boolean
        animalGender:
          type: string
        AnimalSpecieId:
          type: number
        CityId:
          type: number
        photo:
          type: string
          format: binary

    AnimalTagRequest:
      type: object
      properties:
        tagId:
          type: number
      required:
        - tagId

    UserResponse:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
      required:
        - id
        - name

    CityResponse:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        state:
          type: string
      required:
        - id
        - name
        - state

    AnimalTagResponse:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
      required:
        - id
        - name

    AnimalSpecieResponse:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
      required:
        - id
        - name

    OngResponse:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        address:
          type: string
        City:
          $ref: "#/components/schemas/CityResponse"
      required:
        - id
        - name
        - address
        - City

    AnimalResponse:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        description:
          type: string
        imagePath:
          type: string
        birthdate:
          type: string
        heightInCm:
          type: number
        weightInKg:
          type: number
        isNeutered:
          type: boolean
        isDewormed:
          type: boolean
        animalGender:
          type: string
        AnimalSpecieId:
          type: number
        ONGId:
          type: number
        UserId:
          type: number
        CityId:
          type: number
        City:
          $ref: "#/components/schemas/CityResponse"
        User:
          $ref: "#/components/schemas/UserResponse"
        ONG:
          $ref: "#/components/schemas/OngResponse"
        AnimalTags:
          type: array
          items:
            $ref: "#/components/schemas/AnimalTagResponse"

    SimpleAnimalResponse:
      type: object
      properties:
        id:
          type: integer
        imagePath:
          type: string
      required:
        - id
        - imagePath

    UserDetailedInfo:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Bruna Carolina Rodrigues da Cunha
        email:
          type: string
          format: email
          example: brunaru@icmc.usp.br
        isSuperAdmin:
          type: boolean
          example: true
        ContactInfo:
          $ref: "#/components/schemas/ContactInfo"

    ContactInfo:
      type: object
      properties:
        id:
          type: integer
          example: 1
        email:
          type: string
          format: email
          example: brunaru@icmc.usp.br
        instagramProfile:
          type: string
          nullable: true
          example: null
        facebookProfile:
          type: string
          nullable: true
          example: null
        telephoneNumber:
          type: string
          nullable: true
          example: null
        other:
          type: string
          nullable: true
          example: null
