openapi: "3.0.2"

info:
  title: AdoCÃƒO API
  version: "1.0"

servers:
  - url: "http://localhost:8080"
    description: Development server

paths:
  # Auth
  /signup:
    post:
      tags:
        - Auth
      summary: Sign up a new user and get a token
      requestBody:
        description: User object that needs to be added to the database
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignupRequest"
      responses:
        200:
          description: A token object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
  /signin:
    post:
      tags:
        - Auth
      summary: Sign in an existing user and get a token
      requestBody:
        description: User credentials for signing in
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SigninRequest"
      responses:
        200:
          description: A token object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"

  # Animals
  /animals:
    get:
      summary: Retrieve all animals
      responses:
        '200':
          description: Array of animal objects returned upon successful retrieval
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnimalResponse"
    post:
      summary: Create a new animal
      security:
        - Bearer: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/AnimalCreateRequest"
      responses:
        '201':
          description: Animal object created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SimpleAnimalResponse"
        '400':
          description: >
            If the request is missing required fields or specifies an invalid ONG
        '403':
          description: If the user is not authorized to create the animal

  /animals/{id}:
    get:
      summary: Retrieve an animal by ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the animal to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: Animal object returned upon successful retrieval
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnimalResponse"
        '400':
          description: If the specified animal does not exist
        '403':
          description: If the user is not authorized to access the animal
    delete:
      summary: Delete an animal by ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the animal to delete
          schema:
            type: integer
      responses:
        '200':
          description: If the animal is deleted successfully
        '400':
          description: If the specified animal does not exist
        '403':
          description: If the user is not authorized to delete the animal
    put:
      summary: Update an animal by ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the animal to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/AnimalUpdateRequest"
      responses:
        '200':
          description: If the animal is updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SimpleAnimalResponse"
        '400':
          description: If the specified animal does not exist or the request is missing required fields
        '403':
          description: If the user is not authorized to update the animal

  /users/{id}/animals:
    get:
      summary: Retrieve animals belonging to a user
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user whose animals to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: Array of animal objects belonging to the specified user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AnimalResponse"

  /animals/{id}/tag:
    post:
      summary: Add a tag to an animal
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the animal
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AnimalTagRequest"
      responses:
        '200':
          description: If the tag is added successfully
        '400':
          description: If the specified animal or tag does not exist
        '403':
          description: If the user is not authorized to add a tag to the animal
    delete:
      summary: Remove a tag from an animal
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the animal
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AnimalTagRequest"
      responses:
        '200':
          description: If the tag is removed successfully
        '400':
          description: If the specified animal or tag does not exist
        '403':
          description: If the user is not authorized to remove a tag from the animal

  # Extra
  # Ongs
  # Users

components:
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: >-
        Login token

  schemas:
    SignupRequest:
      type: object
      properties:
        name:
          type: string
          example: "Bruna Carolina Rodrigues da Cunha"
        email:
          type: string
          example: "brunaru@icmc.usp.br"
        password:
          type: string
          example: "#Senha1234"
      required:
        - name
        - email
        - password

    SigninRequest:
      type: object
      properties:
        email:
          type: string
          example: "brunaru@icmc.usp.br"
        password:
          type: string
          example: "#Senha1234"
      required:
        - email
        - password

    AuthResponse:
      type: object
      properties:
        token:
          type: object
          properties:
            token:
              type: string
              example: "<base64>"
            payload:
              type: object
              properties:
                sub:
                  type: integer
                  example: 1
                isSuperAdmin:
                  type: boolean
                  example: false
                isOngManager:
                  type: boolean
                  example: false
                isOngWorker:
                  type: boolean
                  example: false

    AnimalCreateRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        birthdate:
          type: string
        heightInCm:
          type: number
        weightInKg:
          type: number
        isNeutered:
          type: boolean
        isDewormed:
          type: boolean
        animalGender:
          type: string
        AnimalSpecieId:
          type: number
        CityId:
          type: number
        isUserOwned:
          type: boolean
        ongId:
          type: number
        photo:
          type: string
          format: binary
      required:
        - name
        - description
        - birthdate
        - isNeutered 
        - isDewormed 
        - isUserOwned
        - animalGender 
        - AnimalSpecieId
        - CityId 
        - photo

    AnimalCreateRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        birthdate:
          type: string
        heightInCm:
          type: number
        weightInKg:
          type: number
        isNeutered:
          type: boolean
        isDewormed:
          type: boolean
        animalGender:
          type: string
        AnimalSpecieId:
          type: number
        CityId:
          type: number
        ongId:
          type: number
        photo:
          type: string
          format: binary

    AnimalTagRequest:
      type: object
      properties:
        tagId:
          type: number
      required:
        - tagId

    UserResponse:
      type: object 
      properties:
        id:
          type: number 
        name:
          type: string 
      required:
        - id 
        - name 

    CityResponse:
      type: object 
      properties:
        id:
          type: number 
        name:
          type: string 
        state:
          type: string 
      required:
        - id
        - name 
        - state

    AnimalTagResponse:
      type: object 
      properties:
        id:
          type: number 
        name:
          type: string 
      require:
        - id 
        - name

    OngResponse:
      type: object 
      properties:
        id:
          type: number 
        name:
          type: string
        address:
          type: string 
        City:
          $ref: '#/components/schemas/CityResponse'
      required:
        - id 
        - name 
        - address 
        - City 

    AnimalResponse:
      type: object 
      properties:
        id:
          type: number 
        name:
          type: string
        description:
          type: string
        imagePath: 
          type: string 
        birthdate:
          type: string
        heightInCm:
          type: number 
        weightInKg:
          type: number 
        isNeutered:
          type: boolean
        isDewormed:
          type: boolean
        animalGender:
          type: string 
        AnimalSpecieId:
          type: number 
        ONGId:
          type: number 
        UserId:
          type: number
        CityId:
          type: number 
        City: 
          $ref: '#/components/schemas/CityResponse'
        User:
          $ref: '#/components/schemas/UserResponse'
        ONG:
          $ref: '#/components/schemas/OngResponse' 
        AnimalTags:
          type: array 
          items:
            $ref: '#/components/schemas/AnimalTagResponse' 

    SimpleAnimalResponse:
      type: object 
      properties:
        id:
          type: integer 
        imagePath:
          type: string 
      required:
        - id 
        - imagePath

